
# Первое задание

'''
e = 95
d = 23
n = 195
m = ord('G')
print(m)

c = pow(m, e, n)
print(c)

m = pow(c, d, n)
print(m)
'''

# Второе задание
'''
name = "flag{inogda_hochetsya_prostogo_piva}"
m = int.from_bytes(name.encode(), 'big')
print('m: ', m)

p = 238324208831434331628131715304428889871
q = 296805874594538235115008173244022912163

n = p * q
print('n: ', n)
phi = (p - 1) * (q - 1)
print('phi: ', phi)

def func(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, x, y = func(b % a, a)
        return (g, y - (b // a) * x, x)

def mulinv(b, n):
    g, x, _ = func(b, n)
    print(g, x, _)

    if g == 1:
        return x % n

e = int(input('Enter your e: '))
# phi = int(input('Enter phi: '))

print(func(e, phi))
inv = mulinv(e, phi)
print('iverse', inv)

# d = 37448483950199244693343282247739490952353160187282590591081973313582331434733
# e = int(input('Enter your e: '))

c = pow(m, e, n)
print(c)

# m = pow(c, d, n)
# print(m)

print(m.to_bytes((m.bit_length() + 7) // 8, 'big').decode())
'''

# Третье задание
'''
n = 9567648541342714273618397561214215397959
e = 65537
c = 7363621633663288624203077252360225035259

p = 70636931
q = 135448247905089679980836052478189

phi = (p - 1) * (q - 1)

def func(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, x, y = func(b % a, a)
        return (g, y - (b // a) * x, x)

def mulinv(b, n):
    g, x, _ = func(b, n)
    print(g, x, _)

    if g == 1:
        return x % n

print(func(e, phi))
inv = mulinv(e, phi)
print('iverse', inv)

m = pow(c, 6247869887652249525823939549986133259513, n)
print(m)

print(m.to_bytes((m.bit_length() + 7) // 8, 'big').decode())
'''

# Четвертое задание

'''
# name = 'flag{inogda_hochetsya_prostogo_piva}'
name = 'flag{ohota_krepkogo_pivka}'
m = int.from_bytes(name.encode(), 'big')
print('m =', m)

e1 = 17
e2 = 13

p = 238324208831434331628131715304428889871
q = 296805874594538235115008173244022912163

n = p * q
phi = (p - 1) * (q - 1)

def func(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, x, y = func(b % a, a)
        return (g, y - (b // a) * x, x)

def mulinv(b, n):
    g, x, _ = func(b, n)
    print(g, x, _)

    if g == 1:
        return x % n

print(f'r = {func(e1, e2)[1]}; s = {func(e1, e2)[2]}')


def gcd(n, m):
    a, a_ = 0, 1
    b, b_ = 1, 0

    c, d = n, m

    q = c // d
    r = c % d
    while r:
        c, d = d, r
        a_, a = a, a_ - q * a
        b_, b = b, b_ - q * b

        q = c // d
        r = c % d
    return (d, a, b)


def modinv(r, m):
    g, x, y = gcd(r, m)
    if g != 1:
        raise Exception('modular inverse does not exist')
    else:
        return x % m

c1 = pow(m, e1, n)
c2 = pow(m, e2, n)
print('n =', n)
print('c1 =', c1, len(str(c1)))
print('c2 =', c2, len(str(c2)))

s = 4
r = -3
g = e2 * s + e1 * r
print('g =', g)
r = (-1) * r

c1_inv = modinv(c1, n)
print('c1_inv = ' + str(c1_inv))
c1r = pow(c1_inv, r, n)
print('c1 ** r = ' + str(c1r))

c2s = pow(c2, s, n)
print('c2 ** s = ' + str(c2s))
m = 0
d = c1r * c2s
# print('d = ' + str(d))
m = d % n
print('m = ' + str(m))

m = m.to_bytes((m.bit_length() + 7) // 8, 'big').decode()
print(m)
'''

# Пятое задание
'''
e = 3
n = 143083491525825465395877549467473122634019679394820033418099757350707258191502808359143919610647078402058348487201585204097941720923333042864838244321628278154525306037536939533838797625643113568209700653940303603375092841934059124207491516204815920725161692699143433279673788058963203942256320389700907411797047492080775661875595284348877381089430714723
m = 1583066912540969128802759852823162059360080457367976364583074984576363792000311546032
c = 39673253344640707261967070580901057772320713540505508925856613302716447336873784009378469237081556695729211020820927205956915149755652085431185393936927721521275394890356066622671267448504355687994987921379499654202819196059549577341001338716642053447
x = 3967325334464070726196707058090105777232071354050550892585661330271644733687378400937846923708155669572921102082092720595691514975565208543118539393692772152127539489035606662267126744850435568799498792137949965420281919605954957734100133871664205344768
def iroot(a, b):
    if b < 2:
        return b
    a1 = a - 1
    c = 1
    d = (a1 * c + b // (c ** a1)) // a
    e = (a1 * d + b // (d ** a1)) // a
    while c not in (d, e):
        c, d, e = d, e, (a1 * e + b // (e ** a1)) // a
    return min(d, e)

print(f'm n-root is {iroot(e, x)}')
print(m.to_bytes((m.bit_length() + 7) // 8, 'big').decode())
'''

# Индивидуальное задание

n = 143083491525825465395877549467473122634019679394820033418099757350707258191502808359143919610647078402058348487201585204097941720923333042864838244321628278154525306037536939533838797625643113568209700653940303603375092841934059124207491516204815920725161692699143433279673788058963203942256320389700907411797047492080775661875595284348877381089430714723
e = 65537
c = 3544109571773221335329738366334370371955630164147397311751514492500787752087595034893995919784378894782905230303047256155071573888259683582539917562817052994061618704568671952203133946306566558261125917457064210979722916871412141361628948269439104898565441202874195814519059621221698357223467689917948531400004806752632899049074341151853628034018437336

phi = 4346796048 * 4348393816 * 4506181590 * 4602175840 * 4731310020 * 4772742016 * 4831765710 * 5051860840 * 5057391616 * 5537092810 * 5637550222 * 5984157202 * 6054473272 * 6234173328 * 6283435648 * 6420203710 * 6538322022 * 6682909642 * 6787480168 * 6882755016 * 6975030970 * 7218192888 * 7218488970 * 7444498230 * 7483582216 * 7551923382 * 7697637340 * 7926848452 * 8114203722 * 8200187856 * 8249061646 * 8311045806 * 8478933538 * 8514516978 * 8557394800 * 8577344776

def func(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, x, y = func(b % a, a)
        return (g, y - (b // a) * x, x)

def mulinv(b, n):
    g, x, _ = func(b, n)
    print(g, x, _)
    if g == 1:
        return x % n

print(func(e, phi))
inv = mulinv(e, phi)
print('iverse', inv)

m = pow(c, 15527256144087305120816948102121428265739687323384990769444182969203216084153124239239183738255282650450535365828815534290434715673701565927894669365060100879476453920074777592457110275613424576707343840081265284467158877802947578223701018142185136475838406973058537133310557323037496718545973701072252228686014201490154226762256066598133248132810473473, n)

m = m.to_bytes((m.bit_length() + 7) // 8, 'big').decode()
print(m)



